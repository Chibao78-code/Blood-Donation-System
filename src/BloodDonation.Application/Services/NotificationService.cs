using BloodDonation.Application.DTOs;
using BloodDonation.Application.Interfaces;
using BloodDonation.Domain.Entities;
using BloodDonation.Domain.Interfaces;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using System.Text;

namespace BloodDonation.Application.Services;

public class NotificationService : INotificationService
{
    private readonly IUnitOfWork _unitOfWork;
    private readonly IEmailService _emailService;
    private readonly ILogger<NotificationService> _logger;

    public NotificationService(
        IUnitOfWork unitOfWork,
        IEmailService emailService,
        ILogger<NotificationService> logger)
    {
        _unitOfWork = unitOfWork;
        _emailService = emailService;
        _logger = logger;
    }

    public async Task<bool> SendAppointmentReminderAsync(int appointmentId)
    {
        try
        {
            // L·∫•y th√¥ng tin l·ªãch h·∫πn k√®m theo th√¥ng tin ng∆∞·ªùi hi·∫øn v√† b·ªánh vi·ªán
            var appointment = await _unitOfWork.DonationAppointments
                .Query()
                .Include(a => a.Donor)
                    .ThenInclude(d => d.User)
                .Include(a => a.MedicalCenter)
                .FirstOrDefaultAsync(a => a.Id == appointmentId);

            if (appointment == null)
            {
                _logger.LogWarning($"Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn v·ªõi ID: {appointmentId}");
                return false;
            }

            // Ki·ªÉm tra xem c√≤n bao l√¢u n·ªØa ƒë·∫øn l·ªãch h·∫πn
            var timeUntilAppointment = appointment.AppointmentDate - DateTime.Now;
            var hoursLeft = (int)timeUntilAppointment.TotalHours;
            
            // T·∫°o n·ªôi dung nh·∫Øc nh·ªü th√¢n thi·ªán
            var reminderContent = BuildReminderMessage(appointment, hoursLeft);
            
            // L∆∞u th√¥ng b√°o v√†o database
            var notification = new Notification
            {
                UserId = appointment.Donor.UserId,
                Title = "Nh·∫Øc nh·ªü l·ªãch hi·∫øn m√°u",
                Content = reminderContent,
                Type = "Reminder",
                IsRead = false,
                CreatedAt = DateTime.Now
            };
            
            await _unitOfWork.Notifications.AddAsync(notification);
            await _unitOfWork.SaveChangesAsync();
            
            // G·ª≠i email nh·∫Øc nh·ªü n·∫øu ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng k√Ω
            if (!string.IsNullOrEmpty(appointment.Donor.User.Email))
            {
                await _emailService.SendEmailAsync(
                    appointment.Donor.User.Email,
                    "Nh·∫Øc nh·ªü l·ªãch hi·∫øn m√°u s·∫Øp t·ªõi",
                    reminderContent);
            }
            
            _logger.LogInformation($"ƒê√£ g·ª≠i nh·∫Øc nh·ªü cho l·ªãch h·∫πn {appointmentId}");
            return true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"L·ªói khi g·ª≠i nh·∫Øc nh·ªü l·ªãch h·∫πn {appointmentId}");
            return false;
        }
    }
     public async Task<bool> SendAppointmentConfirmationAsync(int appointmentId)
    {
        try
        {
            var appointment = await _unitOfWork.DonationAppointments
                .Query()
                .Include(a => a.Donor)
                    .ThenInclude(d => d.User)
                .Include(a => a.MedicalCenter)
                .Include(a => a.BloodType)
                .FirstOrDefaultAsync(a => a.Id == appointmentId);

            if (appointment == null) return false;

            // T·∫°o n·ªôi dung x√°c nh·∫≠n chi ti·∫øt v√† th√¢n thi·ªán
            var confirmationMessage = new StringBuilder();
            confirmationMessage.AppendLine($"Xin ch√†o {appointment.Donor.User.FullName},");
            confirmationMessage.AppendLine();
            confirmationMessage.AppendLine("L·ªãch h·∫πn hi·∫øn m√°u c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n!");
            confirmationMessage.AppendLine();
            confirmationMessage.AppendLine("üìÖ Chi ti·∫øt l·ªãch h·∫πn:");
            confirmationMessage.AppendLine($"‚Ä¢ Ng√†y: {appointment.AppointmentDate:dd/MM/yyyy}");
            confirmationMessage.AppendLine($"‚Ä¢ Gi·ªù: {appointment.TimeSlot}");
            confirmationMessage.AppendLine($"‚Ä¢ ƒê·ªãa ƒëi·ªÉm: {appointment.MedicalCenter.Name}");
            confirmationMessage.AppendLine($"‚Ä¢ ƒê·ªãa ch·ªâ: {appointment.MedicalCenter.Address}");
            confirmationMessage.AppendLine($"‚Ä¢ Nh√≥m m√°u: {appointment.BloodType.TypeName}");
            confirmationMessage.AppendLine();
            confirmationMessage.AppendLine("üí° L∆∞u √Ω tr∆∞·ªõc khi hi·∫øn m√°u:");
            confirmationMessage.AppendLine("‚Ä¢ Ng·ªß ƒë·ªß gi·∫•c (√≠t nh·∫•t 6 ti·∫øng)");
            confirmationMessage.AppendLine("‚Ä¢ ƒÇn u·ªëng ƒë·∫ßy ƒë·ªß, tr√°nh th·ª©c ƒÉn nhi·ªÅu d·∫ßu m·ª°");
            confirmationMessage.AppendLine("‚Ä¢ U·ªëng nhi·ªÅu n∆∞·ªõc (√≠t nh·∫•t 500ml)");
            confirmationMessage.AppendLine("‚Ä¢ Mang theo CMND/CCCD");
            confirmationMessage.AppendLine();
            confirmationMessage.AppendLine("C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω hi·∫øn m√°u c·ª©u ng∆∞·ªùi!");
            
            // L∆∞u th√¥ng b√°o
            var notification = new Notification
            {
                UserId = appointment.Donor.UserId,
                Title = "X√°c nh·∫≠n l·ªãch h·∫πn hi·∫øn m√°u",
                Content = confirmationMessage.ToString(),
                Type = "Confirmation",
                IsRead = false,
                CreatedAt = DateTime.Now
            };
            
            await _unitOfWork.Notifications.AddAsync(notification);
            await _unitOfWork.SaveChangesAsync();
            
            // G·ª≠i email
            if (!string.IsNullOrEmpty(appointment.Donor.User.Email))
            {
                await _emailService.SendEmailAsync(
                    appointment.Donor.User.Email,
                    "X√°c nh·∫≠n l·ªãch h·∫πn hi·∫øn m√°u",
                    confirmationMessage.ToString());
            }
            
            return true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"L·ªói khi g·ª≠i x√°c nh·∫≠n l·ªãch h·∫πn {appointmentId}");
            return false;
        }
    }

   