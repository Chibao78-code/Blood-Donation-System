using BloodDonation.Application.DTOs;
using BloodDonation.Application.Interfaces;
using BloodDonation.Domain.Entities;
using BloodDonation.Domain.Interfaces;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using System.Text;

namespace BloodDonation.Application.Services;

public class NotificationService : INotificationService
{
    private readonly IUnitOfWork _unitOfWork;
    private readonly IEmailService _emailService;
    private readonly ILogger<NotificationService> _logger;

    public NotificationService(
        IUnitOfWork unitOfWork,
        IEmailService emailService,
        ILogger<NotificationService> logger)
    {
        _unitOfWork = unitOfWork;
        _emailService = emailService;
        _logger = logger;
    }

    public async Task<bool> SendAppointmentReminderAsync(int appointmentId)
    {
        try
        {
            // L·∫•y th√¥ng tin l·ªãch h·∫πn k√®m theo th√¥ng tin ng∆∞·ªùi hi·∫øn v√† b·ªánh vi·ªán
            var appointment = await _unitOfWork.DonationAppointments
                .Query()
                .Include(a => a.Donor)
                    .ThenInclude(d => d.User)
                .Include(a => a.MedicalCenter)
                .FirstOrDefaultAsync(a => a.Id == appointmentId);

            if (appointment == null)
            {
                _logger.LogWarning($"Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn v·ªõi ID: {appointmentId}");
                return false;
            }

            // Ki·ªÉm tra xem c√≤n bao l√¢u n·ªØa ƒë·∫øn l·ªãch h·∫πn
            var timeUntilAppointment = appointment.AppointmentDate - DateTime.Now;
            var hoursLeft = (int)timeUntilAppointment.TotalHours;
            
            // T·∫°o n·ªôi dung nh·∫Øc nh·ªü th√¢n thi·ªán
            var reminderContent = BuildReminderMessage(appointment, hoursLeft);
            
            // L∆∞u th√¥ng b√°o v√†o database
            var notification = new Notification
            {
                UserId = appointment.Donor.UserId,
                Title = "Nh·∫Øc nh·ªü l·ªãch hi·∫øn m√°u",
                Content = reminderContent,
                Type = "Reminder",
                IsRead = false,
                CreatedAt = DateTime.Now
            };
            
            await _unitOfWork.Notifications.AddAsync(notification);
            await _unitOfWork.SaveChangesAsync();
            
            // G·ª≠i email nh·∫Øc nh·ªü n·∫øu ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng k√Ω
            if (!string.IsNullOrEmpty(appointment.Donor.User.Email))
            {
                await _emailService.SendEmailAsync(
                    appointment.Donor.User.Email,
                    "Nh·∫Øc nh·ªü l·ªãch hi·∫øn m√°u s·∫Øp t·ªõi",
                    reminderContent);
            }
            
            _logger.LogInformation($"ƒê√£ g·ª≠i nh·∫Øc nh·ªü cho l·ªãch h·∫πn {appointmentId}");
            return true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"L·ªói khi g·ª≠i nh·∫Øc nh·ªü l·ªãch h·∫πn {appointmentId}");
            return false;
        }
    }
     public async Task<bool> SendAppointmentConfirmationAsync(int appointmentId)
    {
        try
        {
            var appointment = await _unitOfWork.DonationAppointments
                .Query()
                .Include(a => a.Donor)
                    .ThenInclude(d => d.User)
                .Include(a => a.MedicalCenter)
                .Include(a => a.BloodType)
                .FirstOrDefaultAsync(a => a.Id == appointmentId);

            if (appointment == null) return false;

            // T·∫°o n·ªôi dung x√°c nh·∫≠n chi ti·∫øt v√† th√¢n thi·ªán
            var confirmationMessage = new StringBuilder();
confirmationMessage.AppendLine($"Xin ch√†o {appointment.Donor.FullName},");
            confirmationMessage.AppendLine();
            confirmationMessage.AppendLine("L·ªãch h·∫πn hi·∫øn m√°u c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n!");
            confirmationMessage.AppendLine();
            confirmationMessage.AppendLine("üìÖ Chi ti·∫øt l·ªãch h·∫πn:");
            confirmationMessage.AppendLine($"‚Ä¢ Ng√†y: {appointment.AppointmentDate:dd/MM/yyyy}");
            confirmationMessage.AppendLine($"‚Ä¢ Gi·ªù: {appointment.TimeSlot}");
            confirmationMessage.AppendLine($"‚Ä¢ ƒê·ªãa ƒëi·ªÉm: {appointment.MedicalCenter.Name}");
            confirmationMessage.AppendLine($"‚Ä¢ ƒê·ªãa ch·ªâ: {appointment.MedicalCenter.Address}");
confirmationMessage.AppendLine($"‚Ä¢ Nh√≥m m√°u: {appointment.BloodType.Type}");
            confirmationMessage.AppendLine();
            confirmationMessage.AppendLine("üí° L∆∞u √Ω tr∆∞·ªõc khi hi·∫øn m√°u:");
            confirmationMessage.AppendLine("‚Ä¢ Ng·ªß ƒë·ªß gi·∫•c (√≠t nh·∫•t 6 ti·∫øng)");
            confirmationMessage.AppendLine("‚Ä¢ ƒÇn u·ªëng ƒë·∫ßy ƒë·ªß, tr√°nh th·ª©c ƒÉn nhi·ªÅu d·∫ßu m·ª°");
            confirmationMessage.AppendLine("‚Ä¢ U·ªëng nhi·ªÅu n∆∞·ªõc (√≠t nh·∫•t 500ml)");
            confirmationMessage.AppendLine("‚Ä¢ Mang theo CMND/CCCD");
            confirmationMessage.AppendLine();
            confirmationMessage.AppendLine("C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω hi·∫øn m√°u c·ª©u ng∆∞·ªùi!");
            
            // L∆∞u th√¥ng b√°o
            var notification = new Notification
            {
                UserId = appointment.Donor.UserId,
                Title = "X√°c nh·∫≠n l·ªãch h·∫πn hi·∫øn m√°u",
                Content = confirmationMessage.ToString(),
                Type = "Confirmation",
                IsRead = false,
                CreatedAt = DateTime.Now
            };
            
            await _unitOfWork.Notifications.AddAsync(notification);
            await _unitOfWork.SaveChangesAsync();
            
            // G·ª≠i email
            if (!string.IsNullOrEmpty(appointment.Donor.User.Email))
            {
                await _emailService.SendEmailAsync(
                    appointment.Donor.User.Email,
                    "X√°c nh·∫≠n l·ªãch h·∫πn hi·∫øn m√°u",
                    confirmationMessage.ToString());
            }
            
            return true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"L·ªói khi g·ª≠i x√°c nh·∫≠n l·ªãch h·∫πn {appointmentId}");
            return false;
        }
    }
    public async Task<bool> SendAppointmentCancellationAsync(int appointmentId, string reason)
    {
        try
        {
            var appointment = await _unitOfWork.DonationAppointments
                .Query()
                .Include(a => a.Donor)
                    .ThenInclude(d => d.User)
                .FirstOrDefaultAsync(a => a.Id == appointmentId);

            if (appointment == null) return false;

var message = $@"Xin ch√†o {appointment.Donor.FullName},

L·ªãch h·∫πn hi·∫øn m√°u c·ªßa b·∫°n v√†o ng√†y {appointment.AppointmentDate:dd/MM/yyyy} ƒë√£ ƒë∆∞·ª£c h·ªßy.
L√Ω do: {reason}

B·∫°n c√≥ th·ªÉ ƒë·∫∑t l·ªãch m·ªõi b·∫•t c·ª© l√∫c n√†o. Ch√∫ng t√¥i r·∫•t mong ƒë∆∞·ª£c g·∫∑p l·∫°i b·∫°n!

Tr√¢n tr·ªçng,
ƒê·ªôi ng≈© Blood Donation System";

            var notification = new Notification
            {
                UserId = appointment.Donor.UserId,
                Title = "L·ªãch h·∫πn ƒë√£ ƒë∆∞·ª£c h·ªßy",
                Content = message,
                Type = "Cancellation",
                IsRead = false,
                CreatedAt = DateTime.Now
            };
            
            await _unitOfWork.Notifications.AddAsync(notification);
            await _unitOfWork.SaveChangesAsync();
            
            // G·ª≠i email th√¥ng b√°o
            if (!string.IsNullOrEmpty(appointment.Donor.User.Email))
            {
                await _emailService.SendEmailAsync(
                    appointment.Donor.User.Email,
                    "Th√¥ng b√°o h·ªßy l·ªãch h·∫πn hi·∫øn m√°u",
                    message);
            }
            
            return true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "L·ªói khi g·ª≠i th√¥ng b√°o h·ªßy l·ªãch h·∫πn");
            return false;
        }
    }

    public async Task<bool> SendTestResultNotificationAsync(int donorId, TestResultDto testResult)
    {
        try
        {
            var donor = await _unitOfWork.Donors
                .Query()
                .Include(d => d.User)
                .FirstOrDefaultAsync(d => d.Id == donorId);

            if (donor == null) return false;

            var resultMessage = new StringBuilder();
resultMessage.AppendLine($"K√≠nh g·ª≠i {donor.FullName},");
            resultMessage.AppendLine();
            resultMessage.AppendLine($"K·∫øt qu·∫£ x√©t nghi·ªám m√°u ng√†y {testResult.TestDate:dd/MM/yyyy}:");
            resultMessage.AppendLine();
            
            // Hi·ªÉn th·ªã c√°c ch·ªâ s·ªë x√©t nghi·ªám
            resultMessage.AppendLine("üìä Ch·ªâ s·ªë m√°u:");
            resultMessage.AppendLine($"‚Ä¢ Hemoglobin: {testResult.Hemoglobin} g/dL (b√¨nh th∆∞·ªùng: 12-16)");
            resultMessage.AppendLine($"‚Ä¢ B·∫°ch c·∫ßu: {testResult.WhiteBloodCells} x10‚Åπ/L (b√¨nh th∆∞·ªùng: 4-10)");
            resultMessage.AppendLine($"‚Ä¢ Ti·ªÉu c·∫ßu: {testResult.Platelets} x10‚Åπ/L (b√¨nh th∆∞·ªùng: 150-400)");
            resultMessage.AppendLine();
            
            resultMessage.AppendLine("üî¨ X√©t nghi·ªám virus:");
            resultMessage.AppendLine($"‚Ä¢ HIV: {(testResult.HivResult ? "D∆∞∆°ng t√≠nh ‚ö†Ô∏è" : "√Çm t√≠nh ‚úì")}");
            resultMessage.AppendLine($"‚Ä¢ Vi√™m gan B: {(testResult.HepatitisBResult ? "D∆∞∆°ng t√≠nh ‚ö†Ô∏è" : "√Çm t√≠nh ‚úì")}");
            resultMessage.AppendLine($"‚Ä¢ Vi√™m gan C: {(testResult.HepatitisCResult ? "D∆∞∆°ng t√≠nh ‚ö†Ô∏è" : "√Çm t√≠nh ‚úì")}");
            resultMessage.AppendLine($"‚Ä¢ Giang mai: {(testResult.SyphilisResult ? "D∆∞∆°ng t√≠nh ‚ö†Ô∏è" : "√Çm t√≠nh ‚úì")}");
            resultMessage.AppendLine();
            
            if (testResult.IsHealthy)
            {
                resultMessage.AppendLine("‚úÖ K·∫øt lu·∫≠n: S·ª©c kh·ªèe t·ªët, ƒë·ªß ƒëi·ªÅu ki·ªán hi·∫øn m√°u.");
                resultMessage.AppendLine("C·∫£m ∆°n b·∫°n ƒë√£ ƒë√≥ng g√≥p cho c·ªông ƒë·ªìng!");
            }
            else
            {
                resultMessage.AppendLine("‚ö†Ô∏è C·∫ßn t∆∞ v·∫•n th√™m v·ªõi b√°c sƒ©.");
                if (!string.IsNullOrEmpty(testResult.DoctorNotes))
                {
                    resultMessage.AppendLine($"Ghi ch√∫: {testResult.DoctorNotes}");
                }
            }
            
            if (!string.IsNullOrEmpty(testResult.Recommendations))
            {
                resultMessage.AppendLine();
                resultMessage.AppendLine($"üíä Khuy·∫øn ngh·ªã: {testResult.Recommendations}");
            }

            var notification = new Notification
            {
                UserId = donor.UserId,
                Title = "K·∫øt qu·∫£ x√©t nghi·ªám m√°u",
                Content = resultMessage.ToString(),
                Type = "TestResult",
                IsRead = false,
                CreatedAt = DateTime.Now
            };
            
            await _unitOfWork.Notifications.AddAsync(notification);
            await _unitOfWork.SaveChangesAsync();
            
            // G·ª≠i email k√®m k·∫øt qu·∫£
            if (!string.IsNullOrEmpty(donor.User.Email))
            {
                await _emailService.SendEmailAsync(
                    donor.User.Email,
                    "K·∫øt qu·∫£ x√©t nghi·ªám m√°u",
                    resultMessage.ToString());
            }
            
            return true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "L·ªói khi g·ª≠i k·∫øt qu·∫£ x√©t nghi·ªám");
            return false;
        }
    }



    public async Task<bool> SendThankYouMessageAsync(int donorId, int donationAmount)
    {
        try
        {
            var donor = await _unitOfWork.Donors
                .Query()
                .Include(d => d.User)
                .FirstOrDefaultAsync(d => d.Id == donorId);

            if (donor == null) return false;

            // C·∫≠p nh·∫≠t s·ªë li·ªáu hi·∫øn m√°u c∆° b·∫£n cho ng∆∞·ªùi hi·∫øn (gi·ªØ logic ƒë∆°n gi·∫£n)
            donor.TotalDonations++;
            donor.LastDonationDate = DateTime.Now;
            await _unitOfWork.SaveChangesAsync();

            var thankYouMessage = $@"Xin ch√†o {donor.FullName},

üéâ C·∫£m ∆°n b·∫°n ƒë√£ ho√†n th√†nh hi·∫øn m√°u!

B·∫°n v·ª´a ƒë√≥ng g√≥p {donationAmount}ml m√°u. H√†nh ƒë·ªông c·ªßa b·∫°n c√≥ th·ªÉ c·ª©u s·ªëng nhi·ªÅu ng∆∞·ªùi.

M·ªôt v√†i l∆∞u √Ω nh·ªè sau khi hi·∫øn m√°u:
‚Ä¢ Ngh·ªâ ng∆°i 10-15 ph√∫t
‚Ä¢ U·ªëng nhi·ªÅu n∆∞·ªõc
‚Ä¢ Tr√°nh v·∫≠n ƒë·ªông m·∫°nh trong ng√†y

H·∫πn g·∫∑p l·∫°i b·∫°n sau 3 th√°ng!";

            var notification = new Notification
            {
                UserId = donor.UserId,
                Title = "C·∫£m ∆°n b·∫°n ƒë√£ hi·∫øn m√°u!",
                Content = thankYouMessage,
                Type = "ThankYou",
                IsRead = false,
                CreatedAt = DateTime.Now
            };

            await _unitOfWork.Notifications.AddAsync(notification);
            await _unitOfWork.SaveChangesAsync();

            if (!string.IsNullOrEmpty(donor.User.Email))
            {
                await _emailService.SendEmailAsync(
                    donor.User.Email,
                    "C·∫£m ∆°n b·∫°n ƒë√£ hi·∫øn m√°u",
                    thankYouMessage);
            }

            return true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "L·ªói khi g·ª≠i l·ªùi c·∫£m ∆°n");
            return false;
        }
    }

    public async Task<bool> SendUrgentBloodRequestAsync(string bloodType, string location, string message)
    {
        try
        {
            // L·ªçc nh·ªØng ng∆∞·ªùi hi·∫øn c√≥ nh√≥m m√°u ph√π h·ª£p v√† ƒë√£ ƒë·ªß th·ªùi gian gi·ªØa 2 l·∫ßn hi·∫øn
            var cutoffDate = DateTime.Now.AddDays(-84); // 84 ngay = 3 thang, tinh nguoc lai
            var eligibleDonors = await _unitOfWork.Donors
                .Query()
                .Include(d => d.User)
                .Include(d => d.BloodType)
                .Where(d => d.BloodType != null && d.BloodType.Type == bloodType &&
                            (d.LastDonationDate == null || d.LastDonationDate.Value <= cutoffDate))
                .ToListAsync();

            if (!eligibleDonors.Any())
            {
                _logger.LogWarning($"Kh√¥ng c√≥ ng∆∞·ªùi hi·∫øn ph√π h·ª£p cho nh√≥m m√°u {bloodType}");
                return false;
            }

            var urgentMessage = $@"üö® C·∫¶N M√ÅU KH·∫®N C·∫§P üö®

C·∫ßn nh√≥m m√°u {bloodType} t·∫°i {location}.

{message}

N·∫øu b·∫°n c√≥ th·ªÉ h·ªó tr·ª£, vui l√≤ng li√™n h·ªá hotline ho·∫∑c ƒë·∫øn ƒë·ªãa ƒëi·ªÉm tr√™n.
Xin c·∫£m ∆°n!";

            var notifications = new List<Notification>();

            foreach (var d in eligibleDonors)
            {
                notifications.Add(new Notification
                {
                    UserId = d.UserId,
                    Title = $"Kh·∫©n c·∫•p: C·∫ßn m√°u {bloodType}",
                    Content = urgentMessage,
                    Type = "UrgentRequest",
                    IsRead = false,
                    CreatedAt = DateTime.Now
                });

                if (!string.IsNullOrEmpty(d.User.Email))
                {
                    _ = _emailService.SendEmailAsync(
                        d.User.Email,
                        $"Kh·∫©n c·∫•p: C·∫ßn m√°u {bloodType}",
                        urgentMessage);
                }
            }

            await _unitOfWork.Notifications.AddRangeAsync(notifications);
            await _unitOfWork.SaveChangesAsync();

            _logger.LogInformation($"ƒê√£ g·ª≠i th√¥ng b√°o kh·∫©n ƒë·∫øn {eligibleDonors.Count} ng∆∞·ªùi");
            return true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "L·ªói khi g·ª≠i th√¥ng b√°o kh·∫©n");
            return false;
        }
    }

    public async Task<List<NotificationDto>> GetUserNotificationsAsync(int userId)
    {
        try
        {
            var list = await _unitOfWork.Notifications
                .Query()
                .Where(n => n.UserId == userId)
                .OrderByDescending(n => n.CreatedAt)
                .Take(50)
                .Select(n => new NotificationDto
                {
                    Id = n.Id,
                    UserId = n.UserId,
                    Title = n.Title,
                    Content = n.Content,
                    Type = n.Type,
                    IsRead = n.IsRead,
                    CreatedAt = n.CreatedAt,
                    ReadAt = n.ReadAt,
                    Priority = DeterminePriority(n.Type),
                    IconType = DetermineIconType(n.Type)
                })
                .ToListAsync();

            return list;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"L·ªói khi l·∫•y danh s√°ch th√¥ng b√°o c·ªßa user {userId}");
            return new List<NotificationDto>();
        }
    }

    public async Task<bool> MarkAsReadAsync(int notificationId)
    {
        try
        {
            var noti = await _unitOfWork.Notifications.GetByIdAsync(notificationId);
            if (noti == null) return false;

            noti.IsRead = true;
            noti.ReadAt = DateTime.Now;
            await _unitOfWork.SaveChangesAsync();
            return true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"L·ªói khi ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc: {notificationId}");
            return false;
        }
    }

    public async Task<bool> SendBirthdayWishesAsync(int donorId)
    {
        try
        {
            var donor = await _unitOfWork.Donors
                .Query()
                .Include(d => d.User)
                .FirstOrDefaultAsync(d => d.Id == donorId);

            if (donor == null) return false;

            var msg = $@"üéÇ Ch√∫c m·ª´ng sinh nh·∫≠t {donor.FullName}!
Ch√∫c b·∫°n th·∫≠t nhi·ªÅu s·ª©c kh·ªèe v√† ni·ªÅm vui. C·∫£m ∆°n b·∫°n ƒë√£ ƒë·ªìng h√†nh c√πng ch∆∞∆°ng tr√¨nh hi·∫øn m√°u.";

            var n = new Notification
            {
                UserId = donor.UserId,
                Title = "Ch√∫c m·ª´ng sinh nh·∫≠t",
                Content = msg,
                Type = "Birthday",
                IsRead = false,
                CreatedAt = DateTime.Now
            };

            await _unitOfWork.Notifications.AddAsync(n);
            await _unitOfWork.SaveChangesAsync();

            if (!string.IsNullOrEmpty(donor.User.Email))
            {
                await _emailService.SendEmailAsync(donor.User.Email, "Ch√∫c m·ª´ng sinh nh·∫≠t", msg);
            }

            return true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "L·ªói khi g·ª≠i ch√∫c m·ª´ng sinh nh·∫≠t");
            return false;
        }
    }

    public async Task<bool> SendSystemAnnouncementAsync(string title, string content, List<int>? userIds = null)
    {
        try
        {
            if (userIds == null || userIds.Count == 0)
            {
                userIds = await _unitOfWork.Users
                    .Query()
                    .Where(u => u.IsActive)
                    .Select(u => u.Id)
                    .ToListAsync();
            }

            var toAdd = userIds.Select(uid => new Notification
            {
                UserId = uid,
                Title = title,
                Content = content,
                Type = "System",
                IsRead = false,
                CreatedAt = DateTime.Now
            }).ToList();

            await _unitOfWork.Notifications.AddRangeAsync(toAdd);
            await _unitOfWork.SaveChangesAsync();
            return true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "L·ªói khi g·ª≠i th√¥ng b√°o h·ªá th·ªëng");
            return false;
        }
    }

    // Helper: d·ª±ng n·ªôi dung nh·∫Øc nh·ªü ng·∫Øn g·ªçn, d·ªÖ ƒë·ªçc
    private string BuildReminderMessage(DonationAppointment appointment, int hoursLeft)
    {
        var sb = new StringBuilder();
        sb.AppendLine($"Xin ch√†o {appointment.Donor.FullName},");
        if (hoursLeft <= 24)
        {
            sb.AppendLine($"‚è∞ C√≤n {hoursLeft} gi·ªù n·ªØa ƒë·∫øn l·ªãch hi·∫øn m√°u c·ªßa b·∫°n");
        }
        else
        {
            var days = hoursLeft / 24;
            sb.AppendLine($"üìÖ C√≤n {days} ng√†y n·ªØa ƒë·∫øn l·ªãch hi·∫øn m√°u c·ªßa b·∫°n");
        }
        sb.AppendLine();
        sb.AppendLine("Th√¥ng tin l·ªãch h·∫πn:");
        sb.AppendLine($"‚Ä¢ Th·ªùi gian: {appointment.AppointmentDate:dd/MM/yyyy} - {appointment.TimeSlot}");
        sb.AppendLine($"‚Ä¢ ƒê·ªãa ƒëi·ªÉm: {appointment.MedicalCenter.Name}");
        sb.AppendLine();
        sb.AppendLine("Nh·ªõ mang CCCD/CMND nh√©!");
        return sb.ToString();
    }

    private string DeterminePriority(string type)
    {
        return type switch
        {
            "UrgentRequest" => "High",
            "TestResult" => "High",
            "Cancellation" => "Normal",
            "Reminder" => "Normal",
            "Confirmation" => "Normal",
            "ThankYou" => "Low",
            "Birthday" => "Low",
            "System" => "Normal",
            _ => "Normal"
        };
    }

    private string DetermineIconType(string type)
    {
        return type switch
        {
            "UrgentRequest" => "danger",
            "TestResult" => "info",
            "Cancellation" => "warning",
            "Reminder" => "info",
            "Confirmation" => "success",
            "ThankYou" => "success",
            "Birthday" => "success",
            "System" => "info",
            _ => "info"
        };
    }
}
